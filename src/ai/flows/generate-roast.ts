// Use server directive is required for all Genkit flows.
'use server';

/**
 * @fileOverview Generates a humorous and roasting response to a hacking-related question.
 *
 * - generateRoast - A function that takes a hacking-related question and returns a humorous and roasting response.
 * - GenerateRoastInput - The input type for the generateRoast function.
 * - GenerateRoastOutput - The return type for the generateRoast function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateRoastInputSchema = z.object({
  question: z.string().describe('The hacking-related question from the user.'),
});
export type GenerateRoastInput = z.infer<typeof GenerateRoastInputSchema>;

const GenerateRoastOutputSchema = z.object({
  roast: z.string().describe('The humorous and roasting response generated by AI.'),
});
export type GenerateRoastOutput = z.infer<typeof GenerateRoastOutputSchema>;

export async function generateRoast(input: GenerateRoastInput): Promise<GenerateRoastOutput> {
  return generateRoastFlow(input);
}

const generateRoastPrompt = ai.definePrompt({
  name: 'generateRoastPrompt',
  input: {
    schema: z.object({
      question: z.string().describe('The hacking-related question from the user.'),
    }),
  },
  output: {
    schema: z.object({
      roast: z.string().describe('The humorous and roasting response generated by AI.'),
    }),
  },
  prompt: `You are a funny and humorous chatbot that replies with roasts.

  The user will ask a question related to hacking, and you generate a humorous and roasting response to that question.  Make sure the response is actually a roast and funny.

  Question: {{{question}}}`,
});

const generateRoastFlow = ai.defineFlow<
  typeof GenerateRoastInputSchema,
  typeof GenerateRoastOutputSchema
>({
  name: 'generateRoastFlow',
  inputSchema: GenerateRoastInputSchema,
  outputSchema: GenerateRoastOutputSchema,
},
async input => {
  const {output} = await generateRoastPrompt(input);
  return output!;
});

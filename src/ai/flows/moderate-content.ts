// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Implements content filtering using AI to ensure the generated roasts remain within ethical and legal boundaries.
 *
 * - moderateContent - A function that handles the content moderation process.
 * - ModerateContentInput - The input type for the moderateContent function.
 * - ModerateContentOutput - The return type for the moderateContent function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const ModerateContentInputSchema = z.object({
  text: z.string().describe('The text to moderate.'),
});
export type ModerateContentInput = z.infer<typeof ModerateContentInputSchema>;

const ModerateContentOutputSchema = z.object({
  isSafe: z.boolean().describe('Whether the content is safe.'),
  reason: z.string().optional().describe('The reason the content is not safe, if applicable.'),
  adjustedText: z.string().optional().describe('The adjusted text, if applicable.'),
});
export type ModerateContentOutput = z.infer<typeof ModerateContentOutputSchema>;

export async function moderateContent(input: ModerateContentInput): Promise<ModerateContentOutput> {
  return moderateContentFlow(input);
}

const moderateContentPrompt = ai.definePrompt({
  name: 'moderateContentPrompt',
  input: {
    schema: z.object({
      text: z.string().describe('The text to moderate.'),
    }),
  },
  output: {
    schema: z.object({
      isSafe: z.boolean().describe('Whether the content is safe.'),
      reason: z.string().optional().describe('The reason the content is not safe, if applicable.'),
      adjustedText: z.string().optional().describe('The adjusted text, if applicable.'),
    }),
  },
  prompt: `You are a content moderation AI.

You will receive text and determine if it is safe, ethical, and legal.
If the text is unsafe, you will return isSafe as false and provide a reason.
If the text can be adjusted to be safe, ethical, and legal, you will return the adjusted text.

Text: {{{text}}}`,
});

const moderateContentFlow = ai.defineFlow<
  typeof ModerateContentInputSchema,
  typeof ModerateContentOutputSchema
>({
  name: 'moderateContentFlow',
  inputSchema: ModerateContentInputSchema,
  outputSchema: ModerateContentOutputSchema,
},
async input => {
  const {output} = await moderateContentPrompt(input);
  return output!;
});
